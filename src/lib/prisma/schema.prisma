datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          Role
  credits       Int?
  document      String?
  tier          Int?
  subscription  Subscription?
  level         Int?

  artsRequested Art[] @relation("RequestedArts")
  artsDesigned  Art[] @relation("DesignedArts")
  billingHistory BillingHistory[]

}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Art {
  id          String    @id @default(cuid())
  name        String    @default("Untitled")
  type        String
  status      String
  image       String[]
  costCredits Int
  unfolded    Int
  animated    Boolean
  requesterId String
  designerId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  concludedAt DateTime?
  downloaded  Boolean @default(false)
  downloadUrl String?

  requester   User      @relation("RequestedArts", fields: [requesterId], references: [id])
  designer    User      @relation("DesignedArts", fields: [designerId], references: [id])
}

model BillingHistory {
  id               String          @id @default(cuid())
  operationValue   Float
  userId           String
  credits          Int
  operationType    OperationType
  subscriptionType SubscriptionType

  user             User            @relation(fields: [userId], references: [id])
}

enum Role {
    DESIGNER
    USER
}

enum Subscription {
    P
    M
    G
}

enum OperationType {
    RECHARGE
    SUBSCRIPTION
}

enum SubscriptionType {
    P
    M
    G
}
